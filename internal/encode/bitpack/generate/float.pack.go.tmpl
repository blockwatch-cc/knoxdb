 // Copyright (c) 2025 Blockwatch Data Inc.
// Code automatically generated - DO NOT EDIT.
// Any manual changes will be lost.

package {{.Package}}

import (
    "unsafe"
)

{{- $bitsRange := bitsFuncRange .Bits}}
// Reader
var unpack_f{{$.Bits}} =  [{{inc $.Bits 1}}]func(out *[64]float{{$.Bits}}, p unsafe.Pointer, minv uint64, f, e float{{.Bits}}){
    {{- range $bitsize, $value := $bitsRange }}
        br_f{{$.Bits}}_{{$bitsize}},
    {{- end}}
    br_f{{$.Bits}},
}

{{- range $bitsize, $value := $bitsRange}}
func br_f{{$.Bits}}_{{$bitsize}}(out *[64]float{{$.Bits}}, p unsafe.Pointer, minv uint64, f, e float{{$.Bits}}) {
    {{- if gt $bitsize 0 }}
        in := (*[{{$bitsize}}]uint64)(p)
        mask := uint64((1 << {{$bitsize}}) - 1)
        {{- $inputIdx := 0 }}
        {{- $outIdx := 0 }}
        {{- $offset  := 0 }}
        {{- $shifter := 0 }}
        {{- $bitsizeOuterRange := bitsFuncRange $bitsize }}
        {{- range $v0Idx, $v0Val := $bitsizeOuterRange }}
            {{- $bitsizeInnerRange := bitRange 64 $bitsize $offset}}
            {{- range $vIdx, $vVal := $bitsizeInnerRange }}
                {{- if and (lt $shifter 64) (lt $outIdx 64) }}
                    {{- $offset = inc $offset $bitsize }}
                    {{- if gt $offset 64 }}
                            {{- $nextInputIdx := inc $inputIdx 1 }}
                            {{- $nextShifter := dec 64 $shifter}}
                            out[{{$outIdx}}] = float{{$.Bits}}(uint{{$.Bits}}((in[{{$inputIdx}}]>>{{$shifter}}|in[{{$nextInputIdx}}]<<{{$nextShifter}})&mask + minv)) * f * e
                            {{- $shifter = dec $bitsize $nextShifter }}
                            {{- $offset = $shifter }}
                            {{- $inputIdx = $nextInputIdx }}
                        {{- else }}
                            {{- if $shifter }}
                            out[{{$outIdx}}] = float{{$.Bits}}(uint{{$.Bits}}((in[{{$inputIdx}}]>>{{$shifter}})&mask + minv)) * f * e
                            {{- else}}
                            out[{{$outIdx}}] = float{{$.Bits}}(uint{{$.Bits}}(in[{{$inputIdx}}]&mask + minv)) * f * e
                            {{- end}}
                            {{- $shifter = inc $shifter $bitsize }}
                        {{- end }}
                        {{- $outIdx = inc $outIdx 1 }}
                    {{- end }}

                {{- end }}
            {{- if eq $offset 64 }}
                {{- $offset = 0 }}
                {{- $shifter = 0 }}
                {{- $inputIdx = inc $inputIdx 1 }}
            {{- end}}
        {{- end}}
    {{ else }}
        for i := range out {
            out[i] = float{{$.Bits}}(uint{{$.Bits}}(minv)) * f * e
        }
    {{- end -}}
}
{{ end}}

func br_f{{$.Bits}}(out *[64]float{{$.Bits}}, p unsafe.Pointer, minv uint64, f, e float{{$.Bits}}) {
    in := (*[64]uint64)(p)
    var i int
    for range 4 {
        out[i] = float{{$.Bits}}(uint{{$.Bits}}(in[i] + minv)) * f * e
        out[i+1] = float{{$.Bits}}(uint{{$.Bits}}(in[i+1] + minv)) * f * e
        out[i+2] = float{{$.Bits}}(uint{{$.Bits}}(in[i+2] + minv)) * f * e
        out[i+3] = float{{$.Bits}}(uint{{$.Bits}}(in[i+3] + minv)) * f * e
        out[i+4] = float{{$.Bits}}(uint{{$.Bits}}(in[i+4] + minv)) * f * e
        out[i+5] = float{{$.Bits}}(uint{{$.Bits}}(in[i+5] + minv)) * f * e
        out[i+6] = float{{$.Bits}}(uint{{$.Bits}}(in[i+6] + minv)) * f * e
        out[i+7] = float{{$.Bits}}(uint{{$.Bits}}(in[i+7] + minv)) * f * e
        out[i+8] = float{{$.Bits}}(uint{{$.Bits}}(in[i+8] + minv)) * f * e
        out[i+9] = float{{$.Bits}}(uint{{$.Bits}}(in[i+9] + minv)) * f * e
        out[i+10] = float{{$.Bits}}(uint{{$.Bits}}(in[i+10] + minv)) * f * e
        out[i+11] = float{{$.Bits}}(uint{{$.Bits}}(in[i+11] + minv)) * f * e
        out[i+12] = float{{$.Bits}}(uint{{$.Bits}}(in[i+12] + minv)) * f * e
        out[i+13] = float{{$.Bits}}(uint{{$.Bits}}(in[i+13] + minv)) * f * e
        out[i+14] = float{{$.Bits}}(uint{{$.Bits}}(in[i+14] + minv)) * f * e
        out[i+15] = float{{$.Bits}}(uint{{$.Bits}}(in[i+15] + minv)) * f * e
        i += 16
    }
}